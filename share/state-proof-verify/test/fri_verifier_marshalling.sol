// SPDX-License-Identifier: MIT OR Apache-2.0
//---------------------------------------------------------------------------//
// Copyright (c) 2021 Mikhail Komarov <nemo@nil.foundation>
// Copyright (c) 2021 Ilias Khairullin <ilias@nil.foundation>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//

pragma solidity >=0.8.4;
pragma experimental ABIEncoderV2;

import "truffle/Assert.sol";
import '../contracts/types.sol';
import '../contracts/commitments/fri_verifier.sol';
import '../contracts/cryptography/transcript.sol';

// TODO: add false-positive tests
contract TestFRIVerifierMarshalling {
    function test_fri_proof_marshalling() public {
        // tree depth = 5
        bytes memory raw_proof = hex"2bf4c75f7fe2126f88761b90ff29f3ee787d0a294fb1a7f2e7a2fffbe8a2963f000000000000002083650fe4b3d91b1e78f0b3bcfc437b55f1b70f66d4507092685e9cde9d1ae7d9000000000000000240db90e0ac8421dd6ff25e3803c3af26464ab1a916f6be66e8745ae1ab59e6c5278374d4639ae70cd58237506fe0e86231a6eccefa7c14cbeae1014d368778ac000000000000001a00000000000000208725b07396b5ae1a11b7986fe80880f4fb4d5c266445f773f0fa85f4b32ce026000000000000000500000000000000010000000000000001000000000000002018f4f4b95d5fde947f92d0b1e410bbb3900e7140da6b4edd78acf78a6dcb8c6d000000000000000100000000000000000000000000000020f3b3ad363d5334dda6f2a2c056f599780916ceabe4b882527e5d5e6eb9a1bdd70000000000000001000000000000000100000000000000201f2acda2d0ba7a523ef704ade88a2becb6f24f44b07a4eb8456d14cc2bb582a5000000000000000100000000000000000000000000000020749e7650f8168f2d4cedbd40678b97f777736dfa12508600eeccbd38826240bd0000000000000001000000000000000000000000000000203b4b235c744e3eb3354b07bc167d8eab443ab366f14f3eb41ce076a6bfd2629f000000000000000200000000000000160000000000000020f272558e1aa215d4c993c98f05d2a08f810b01aef7b446e9ec813ad2832ecb8c0000000000000005000000000000000100000000000000010000000000000020388f722755a1e669b0342693057a975d8e3d6228bc01f29765586dce08a07fb4000000000000000100000000000000000000000000000020a5a51345efaf6b7829c72f78e4b11c7fd990c114ec558e8fcb09ae7cdcb9e140000000000000000100000000000000000000000000000020afcb22c80bf300448287325042989c0c3336da28096b774f508afef6aaec5fd50000000000000001000000000000000100000000000000209fe0d0d063a58453bc1df76608249e0e0858e5c9e954aa3047df21585a615a7a00000000000000010000000000000000000000000000002088adcde89d06f6fa1eef78d563365a390840368b23983e25ae66ad891885b3c400000000000000130000000000000020e87e8268b1e23884c170c90e07258abf4a0b308f62b47a0399e35d53df9b9faf0000000000000005000000000000000100000000000000000000000000000020ed70a558d720f7e82f2107bb975a483d05d702b3b023933bcd9fab25c1a70cfd000000000000000100000000000000000000000000000020a36d9a2a21233d72b8534efc2e4bf75f12e8c41fe5b3904071d3bfdf09d355ee000000000000000100000000000000010000000000000020ab83d0fa0d580c45d799d7d1385e1a6f15e108727f8d209aa83709debb4aaf7f0000000000000001000000000000000100000000000000202db5dbde2659e81a6eef59eaac97325ed7bd01f8166594cf575e3bea4bc658ed00000000000000010000000000000000000000000000002052e476f4f80f907e3551f0d3e986da01460f6504df84c30b39d6a3db9041dd0e";
        (types.fri_round_proof_type memory round_proof, uint256 round_proof_size) = fri_verifier.parse_round_proof_be(raw_proof, 0);
        Assert.equal(raw_proof.length, round_proof_size, "Round proof length is not correct");
        uint256[2] memory etalon_y = [uint256(29335961725185576543323499320733178417526223883075320915687427256572505089733), uint256(17872464388807918718962722713254896551988475509500926988741272471702025500844)];
        uint256 etalon_colinear_value = 19881939195071986852360266395256556670266930866322317437977032550321794225727;
        bytes32 etalon_T_root = hex"83650fe4b3d91b1e78f0b3bcfc437b55f1b70f66d4507092685e9cde9d1ae7d9";
        Assert.equal(round_proof.y.length, etalon_y.length, "Round proof y length is not correct");
        for (uint256 i = 0; i < etalon_y.length; i++) {
            Assert.equal(round_proof.y[i], etalon_y[i], "Round proof y is not correct");
        }
        Assert.equal(round_proof.colinear_value, etalon_colinear_value, "Round proof colinear_value is not correct");
        Assert.equal(round_proof.T_root, etalon_T_root, "Round proof T_root is not correct");
        bytes32 colinear_path_verifiable_data = hex"3724165e3e9023cc0c4235dcbc23b26ad6efe791382b3f8ef17393ae4a9c576f";
        Assert.equal(true, merkle_verifier.verify_merkle_proof(round_proof.colinear_path, colinear_path_verifiable_data), "Round proof colinear_path is not correct");
        bytes32[2] memory p_verifiable_data = [bytes32(hex"9ab21704eef4cd6a6b2f099c5b4a61657ee97aba9acac785c8d63b98f5ee8054"), bytes32(hex"5a3f50b2f00a3934014fa5ae9999b8ddda35d246d4f8770bac66e4d92b3e6b6a")];
        Assert.equal(round_proof.p.length, p_verifiable_data.length, "Round proof y length is not correct");
        for (uint256 i = 0; i < etalon_y.length; i++) {
            Assert.equal(true, merkle_verifier.verify_merkle_proof(round_proof.p[i], p_verifiable_data[i]), "Round proof p is not correct");
        }

        // tree depth = 5, round proofs number = 6, final polynomial degree = 7
        raw_proof = hex"";
        (types.fri_proof_type memory proof, uint256 proof_size) = fri_verifier.parse_proof_be(raw_proof, 0);
        Assert.equal(raw_proof.length, proof_size, "Proof length is not correct");
        Assert.equal(raw_proof.length, fri_verifier.skip_proof_be(raw_proof, 0), "Skipping proof is not correct");
    }

    function test_fri_proof_verification_d16() public {
        // bn254 scalar field
        uint256 modulus = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        bytes memory raw_proof = hex"0000000000000001149350a3f93911fe5cc82ac9c65d277638725f97e2c4a8967d6b56bb8f40760c00000000000000040334a5283db3d274f3af1786d36ef745afe16e4a823705ad8db657bc1671c2f700000000000000200f044be55eca548bd7963cc4cfb11adb7a3b043c3f300c80eba0fdcc7900353600000000000000020559201106e80dedf628230cd76d081bf8b42137cf2c9d6bb862f2fbcafd37a31278f47c764d688ed5ea487d2cd262139c57874aa1b1c5406e59ac5ae0597dba00000000000000010000000000000020340e65a1d4528bd4a8ca97765eff0e5b95b51e0baf255176f6b7b707f95eae590000000000000003000000000000000100000000000000000000000000000020998ab035cb6d8387e90d418171ba07c9d56e07735e4f8cb63c9f5d782b860bc7000000000000000100000000000000010000000000000020a693b777a1b5cdf9e7f79e3c971f76ea7164d7e31bcecfe7381cf4ea3342445c000000000000000100000000000000010000000000000020f8ead15e9a227840dbfb08ca9ed87984de4763f5de50641ae9193ec8881985e90000000000000002000000000000000100000000000000200f044be55eca548bd7963cc4cfb11adb7a3b043c3f300c80eba0fdcc790035360000000000000004000000000000000100000000000000000000000000000020c6bb06cb7f92603de181bf256cd16846b93b752a170ff24824098b31aa008a7e0000000000000001000000000000000100000000000000206926cc6f9563da8fa6836177688ebfd52e3446c2e344d37949a222802a94eee70000000000000001000000000000000100000000000000205194a231165353123cbe4940bdbee3c1e726f8ed8ab5c6f5632d9353a2e8496d00000000000000010000000000000001000000000000002072697671d9683845d813b5b609a51e9e1c398b1ae9e2fecd065680155b0c6550000000000000000900000000000000200f044be55eca548bd7963cc4cfb11adb7a3b043c3f300c80eba0fdcc7900353600000000000000040000000000000001000000000000000000000000000000208a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b000000000000000100000000000000010000000000000020f30cd4b26a02d9e7718d60239f2256ee5ed5c5abfb059c08afa921df0b4cb30f0000000000000001000000000000000100000000000000204588fe9e87ee6f31163531890c67d678d24c4494821a1028f0f465520ff379e3000000000000000100000000000000000000000000000020ff58fff29fd22036c585d43655b2a2e930aaccffa097d22c96f45c4f101223c802341b1310b4dd47277804a47997784828d99a3555c0bbbe62e635a7d51f32f30000000000000020340e65a1d4528bd4a8ca97765eff0e5b95b51e0baf255176f6b7b707f95eae5900000000000000020334a5283db3d274f3af1786d36ef745afe16e4a823705ad8db657bc1671c2f713e973fe5ac040f6c01103060acfe512ad2d573af24d29b2524deb69617d98d700000000000000010000000000000020acc60cdc8d29be5a66d95632277cbf51c1871525f31d89fa35b6ddfe748973ce0000000000000002000000000000000100000000000000000000000000000020d45332e5b9b3c2aef6061517078322d0703e78ea0aa4b43e883ed381815e72ee0000000000000001000000000000000100000000000000202935a0176aa6e3e3c0a178383e6f9c7a5fc2fe2ef7dd2e68aea50f17e7e7d1a1000000000000000200000000000000010000000000000020340e65a1d4528bd4a8ca97765eff0e5b95b51e0baf255176f6b7b707f95eae590000000000000003000000000000000100000000000000000000000000000020998ab035cb6d8387e90d418171ba07c9d56e07735e4f8cb63c9f5d782b860bc7000000000000000100000000000000010000000000000020a693b777a1b5cdf9e7f79e3c971f76ea7164d7e31bcecfe7381cf4ea3342445c000000000000000100000000000000010000000000000020f8ead15e9a227840dbfb08ca9ed87984de4763f5de50641ae9193ec8881985e900000000000000050000000000000020340e65a1d4528bd4a8ca97765eff0e5b95b51e0baf255176f6b7b707f95eae5900000000000000030000000000000001000000000000000000000000000000209ae8f7e9f2dd92a357e9711e73b3caab3c3bcbe080cd1d24542667d5a4bb1918000000000000000100000000000000010000000000000020a1df989c31d035449e13902c13ad5902f211c96201153efdda7c74fe9f4b3b88000000000000000100000000000000000000000000000020ca0ad69fab8a3f1904afb1e30b4393706c607100b4f1b897463b4ae7f7fc56e519b8979cbfa7296adbfa67b64feea52196d3b61a3c6165f27390e4cab74bf4ee0000000000000020acc60cdc8d29be5a66d95632277cbf51c1871525f31d89fa35b6ddfe748973ce000000000000000202341b1310b4dd47277804a47997784828d99a3555c0bbbe62e635a7d51f32f32585c9c77f938cd7f67add0f5645ae76cc51e83160fbc9e59fe620651039d5480000000000000001000000000000002067dbb8c56baac607092baa212ad0d1a22deea771d736d8ab485d54f34d9c647400000000000000010000000000000001000000000000000000000000000000208b9a1498136a9fe584e1125d52f6a25b383feb7823fd84f8063e7f23b1c2acfb000000000000000200000000000000010000000000000020acc60cdc8d29be5a66d95632277cbf51c1871525f31d89fa35b6ddfe748973ce0000000000000002000000000000000100000000000000000000000000000020d45332e5b9b3c2aef6061517078322d0703e78ea0aa4b43e883ed381815e72ee0000000000000001000000000000000100000000000000202935a0176aa6e3e3c0a178383e6f9c7a5fc2fe2ef7dd2e68aea50f17e7e7d1a100000000000000030000000000000020acc60cdc8d29be5a66d95632277cbf51c1871525f31d89fa35b6ddfe748973ce00000000000000020000000000000001000000000000000000000000000000205a8fdd189ea47e6e243ffe0599772e70c5fdc9100fdb71455444a6cb5ba7920a00000000000000010000000000000000000000000000002063acc43c64829db93d053dc39c43abb44d352266e552c8b485ef04b7e62eeb2f149350a3f93911fe5cc82ac9c65d277638725f97e2c4a8967d6b56bb8f40760c000000000000002067dbb8c56baac607092baa212ad0d1a22deea771d736d8ab485d54f34d9c6474000000000000000219b8979cbfa7296adbfa67b64feea52196d3b61a3c6165f27390e4cab74bf4ee2e898308a309ccaf5682fd694d912507ab7dc25296517ea409690d745aa148a400000000000000000000000000000020d0713082ff7f000099385b0000000000eda00c13d58f80b4f8ffffffffffffff000000000000000000000000000000020000000000000001000000000000002067dbb8c56baac607092baa212ad0d1a22deea771d736d8ab485d54f34d9c647400000000000000010000000000000001000000000000000000000000000000208b9a1498136a9fe584e1125d52f6a25b383feb7823fd84f8063e7f23b1c2acfb0000000000000000000000000000002067dbb8c56baac607092baa212ad0d1a22deea771d736d8ab485d54f34d9c6474000000000000000100000000000000010000000000000001000000000000002073526e8c18933b8fcf96b8924370301f386abdf87e0ceaddae6d4d440721aa88";
        bytes memory init_blob = hex"00010203040506070809";
        types.transcript_data memory tr_state;
        transcript.init_transcript(tr_state, init_blob);
        types.fri_params_type memory params;
        params.modulus = modulus;
        params.r = 4;
        params.max_degree = 15;
        uint256[] memory D_omegas = new uint256[](params.r);
        D_omegas[0] = 14940766826517323942636479241147756311199852622225275649687664389641784935947;
        D_omegas[1] = 19540430494807482326159819597004422086093766032135589407132600596362845576832;
        D_omegas[2] = 21888242871839275217838484774961031246007050428528088939761107053157389710902;
        D_omegas[3] = 21888242871839275222246405745257275088548364400416034343698204186575808495616;
        params.D_omegas = D_omegas;
        uint256[] memory q = new uint256[](3);
        q[0] = 0;
        q[1] = 0;
        q[2] = 1;
        params.q = q;
        uint256[] memory U = new uint256[](1);
        U[0] = 0;
        uint256[] memory V = new uint256[](1);
        V[0] = 1;
        params.U = U;
        params.V = V;
        (types.fri_proof_type memory proof, uint256 proof_size) = fri_verifier.parse_proof_be(raw_proof, 0);
        Assert.equal(raw_proof.length, proof_size, "Proof length is not correct");
        bool result = fri_verifier.verifyProof(proof, tr_state, params);
        Assert.equal(true, result, "Proof is not correct");
        Assert.equal(raw_proof.length, fri_verifier.skip_proof_be(raw_proof, 0), "Skipping proof is not correct");
    }

    function test_fri_proof_raw_verification_d16() public {
        // bn254 scalar field
        uint256 modulus = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        bytes memory raw_proof = hex"0000000000000001149350a3f93911fe5cc82ac9c65d277638725f97e2c4a8967d6b56bb8f40760c00000000000000040334a5283db3d274f3af1786d36ef745afe16e4a823705ad8db657bc1671c2f700000000000000200f044be55eca548bd7963cc4cfb11adb7a3b043c3f300c80eba0fdcc7900353600000000000000020559201106e80dedf628230cd76d081bf8b42137cf2c9d6bb862f2fbcafd37a31278f47c764d688ed5ea487d2cd262139c57874aa1b1c5406e59ac5ae0597dba00000000000000010000000000000020340e65a1d4528bd4a8ca97765eff0e5b95b51e0baf255176f6b7b707f95eae590000000000000003000000000000000100000000000000000000000000000020998ab035cb6d8387e90d418171ba07c9d56e07735e4f8cb63c9f5d782b860bc7000000000000000100000000000000010000000000000020a693b777a1b5cdf9e7f79e3c971f76ea7164d7e31bcecfe7381cf4ea3342445c000000000000000100000000000000010000000000000020f8ead15e9a227840dbfb08ca9ed87984de4763f5de50641ae9193ec8881985e90000000000000002000000000000000100000000000000200f044be55eca548bd7963cc4cfb11adb7a3b043c3f300c80eba0fdcc790035360000000000000004000000000000000100000000000000000000000000000020c6bb06cb7f92603de181bf256cd16846b93b752a170ff24824098b31aa008a7e0000000000000001000000000000000100000000000000206926cc6f9563da8fa6836177688ebfd52e3446c2e344d37949a222802a94eee70000000000000001000000000000000100000000000000205194a231165353123cbe4940bdbee3c1e726f8ed8ab5c6f5632d9353a2e8496d00000000000000010000000000000001000000000000002072697671d9683845d813b5b609a51e9e1c398b1ae9e2fecd065680155b0c6550000000000000000900000000000000200f044be55eca548bd7963cc4cfb11adb7a3b043c3f300c80eba0fdcc7900353600000000000000040000000000000001000000000000000000000000000000208a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b000000000000000100000000000000010000000000000020f30cd4b26a02d9e7718d60239f2256ee5ed5c5abfb059c08afa921df0b4cb30f0000000000000001000000000000000100000000000000204588fe9e87ee6f31163531890c67d678d24c4494821a1028f0f465520ff379e3000000000000000100000000000000000000000000000020ff58fff29fd22036c585d43655b2a2e930aaccffa097d22c96f45c4f101223c802341b1310b4dd47277804a47997784828d99a3555c0bbbe62e635a7d51f32f30000000000000020340e65a1d4528bd4a8ca97765eff0e5b95b51e0baf255176f6b7b707f95eae5900000000000000020334a5283db3d274f3af1786d36ef745afe16e4a823705ad8db657bc1671c2f713e973fe5ac040f6c01103060acfe512ad2d573af24d29b2524deb69617d98d700000000000000010000000000000020acc60cdc8d29be5a66d95632277cbf51c1871525f31d89fa35b6ddfe748973ce0000000000000002000000000000000100000000000000000000000000000020d45332e5b9b3c2aef6061517078322d0703e78ea0aa4b43e883ed381815e72ee0000000000000001000000000000000100000000000000202935a0176aa6e3e3c0a178383e6f9c7a5fc2fe2ef7dd2e68aea50f17e7e7d1a1000000000000000200000000000000010000000000000020340e65a1d4528bd4a8ca97765eff0e5b95b51e0baf255176f6b7b707f95eae590000000000000003000000000000000100000000000000000000000000000020998ab035cb6d8387e90d418171ba07c9d56e07735e4f8cb63c9f5d782b860bc7000000000000000100000000000000010000000000000020a693b777a1b5cdf9e7f79e3c971f76ea7164d7e31bcecfe7381cf4ea3342445c000000000000000100000000000000010000000000000020f8ead15e9a227840dbfb08ca9ed87984de4763f5de50641ae9193ec8881985e900000000000000050000000000000020340e65a1d4528bd4a8ca97765eff0e5b95b51e0baf255176f6b7b707f95eae5900000000000000030000000000000001000000000000000000000000000000209ae8f7e9f2dd92a357e9711e73b3caab3c3bcbe080cd1d24542667d5a4bb1918000000000000000100000000000000010000000000000020a1df989c31d035449e13902c13ad5902f211c96201153efdda7c74fe9f4b3b88000000000000000100000000000000000000000000000020ca0ad69fab8a3f1904afb1e30b4393706c607100b4f1b897463b4ae7f7fc56e519b8979cbfa7296adbfa67b64feea52196d3b61a3c6165f27390e4cab74bf4ee0000000000000020acc60cdc8d29be5a66d95632277cbf51c1871525f31d89fa35b6ddfe748973ce000000000000000202341b1310b4dd47277804a47997784828d99a3555c0bbbe62e635a7d51f32f32585c9c77f938cd7f67add0f5645ae76cc51e83160fbc9e59fe620651039d5480000000000000001000000000000002067dbb8c56baac607092baa212ad0d1a22deea771d736d8ab485d54f34d9c647400000000000000010000000000000001000000000000000000000000000000208b9a1498136a9fe584e1125d52f6a25b383feb7823fd84f8063e7f23b1c2acfb000000000000000200000000000000010000000000000020acc60cdc8d29be5a66d95632277cbf51c1871525f31d89fa35b6ddfe748973ce0000000000000002000000000000000100000000000000000000000000000020d45332e5b9b3c2aef6061517078322d0703e78ea0aa4b43e883ed381815e72ee0000000000000001000000000000000100000000000000202935a0176aa6e3e3c0a178383e6f9c7a5fc2fe2ef7dd2e68aea50f17e7e7d1a100000000000000030000000000000020acc60cdc8d29be5a66d95632277cbf51c1871525f31d89fa35b6ddfe748973ce00000000000000020000000000000001000000000000000000000000000000205a8fdd189ea47e6e243ffe0599772e70c5fdc9100fdb71455444a6cb5ba7920a00000000000000010000000000000000000000000000002063acc43c64829db93d053dc39c43abb44d352266e552c8b485ef04b7e62eeb2f149350a3f93911fe5cc82ac9c65d277638725f97e2c4a8967d6b56bb8f40760c000000000000002067dbb8c56baac607092baa212ad0d1a22deea771d736d8ab485d54f34d9c6474000000000000000219b8979cbfa7296adbfa67b64feea52196d3b61a3c6165f27390e4cab74bf4ee2e898308a309ccaf5682fd694d912507ab7dc25296517ea409690d745aa148a400000000000000000000000000000020d0713082ff7f000099385b0000000000eda00c13d58f80b4f8ffffffffffffff000000000000000000000000000000020000000000000001000000000000002067dbb8c56baac607092baa212ad0d1a22deea771d736d8ab485d54f34d9c647400000000000000010000000000000001000000000000000000000000000000208b9a1498136a9fe584e1125d52f6a25b383feb7823fd84f8063e7f23b1c2acfb0000000000000000000000000000002067dbb8c56baac607092baa212ad0d1a22deea771d736d8ab485d54f34d9c6474000000000000000100000000000000010000000000000001000000000000002073526e8c18933b8fcf96b8924370301f386abdf87e0ceaddae6d4d440721aa88";
        bytes memory init_blob = hex"00010203040506070809";
        types.transcript_data memory tr_state;
        transcript.init_transcript(tr_state, init_blob);
        types.fri_params_type memory params;
        params.modulus = modulus;
        params.r = 4;
        params.max_degree = 15;
        uint256[] memory D_omegas = new uint256[](params.r);
        D_omegas[0] = 14940766826517323942636479241147756311199852622225275649687664389641784935947;
        D_omegas[1] = 19540430494807482326159819597004422086093766032135589407132600596362845576832;
        D_omegas[2] = 21888242871839275217838484774961031246007050428528088939761107053157389710902;
        D_omegas[3] = 21888242871839275222246405745257275088548364400416034343698204186575808495616;
        params.D_omegas = D_omegas;
        uint256[] memory q = new uint256[](3);
        q[0] = 0;
        q[1] = 0;
        q[2] = 1;
        params.q = q;
        uint256[] memory U = new uint256[](1);
        U[0] = 0;
        uint256[] memory V = new uint256[](1);
        V[0] = 1;
        params.U = U;
        params.V = V;
        (bool result1, uint256 proof_size1) = fri_verifier.parse_verify_proof_be(raw_proof, 0, tr_state, params);
        Assert.equal(true, result1, "Proof is not correct!");
        Assert.equal(raw_proof.length, proof_size1, "Proof length is not correct!");
        Assert.equal(raw_proof.length, fri_verifier.skip_proof_be(raw_proof, 0), "Skipping proof is not correct");
    }
}
